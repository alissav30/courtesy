{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport MapView from 'react-native-maps';\nimport { Marker } from 'react-native-maps';\nimport { Ionicons } from '@expo/vector-icons';\nimport { getCountdownDays, homeScreenMoods, moods } from \"../utils\";\n\nvar swoopBackground = require(\"./home_background.png\");\n\nvar xCoordinates = [20, 150, 284, 30, 160, 284, 20, 150, 280, 20, 280];\nvar yCoordinates = [30, -15, -185, -160, -195, -380, -350, -370, -550, -530, -640];\n\nvar MoodBubble = function MoodBubble(_ref) {\n  var mood = _ref.mood,\n      index = _ref.index,\n      setMood = _ref.setMood,\n      setIsMoodPicker = _ref.setIsMoodPicker,\n      setIsCustomMoodScreen = _ref.setIsCustomMoodScreen;\n  return React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      if (mood !== \"other...\") {\n        setMood(mood.toLowerCase());\n        setIsMoodPicker(false);\n      } else {\n        setIsCustomMoodScreen(true);\n      }\n    }\n  }, React.createElement(View, {\n    style: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 100,\n      backgroundColor: '#8DA4A3',\n      width: 110,\n      height: 110,\n      left: xCoordinates[index],\n      top: yCoordinates[index],\n      position: 'fixed',\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 0\n      },\n      shadowOpacity: 0.25,\n      shadowRadius: 4\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'white',\n      fontWeight: '500'\n    }\n  }, \" \", mood, \" \")));\n};\n\nvar MoodPicker = function MoodPicker(_ref2) {\n  var navigation = _ref2.navigation,\n      mood = _ref2.mood,\n      setMood = _ref2.setMood,\n      setIsMoodPicker = _ref2.setIsMoodPicker;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isCustomMoodScreen = _useState2[0],\n      setIsCustomMoodScreen = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      customMood = _useState4[0],\n      setCustomMood = _useState4[1];\n\n  if (isCustomMoodScreen) {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        padding: 0,\n        backgroundColor: '#768A89'\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: 'row',\n        marginTop: 70,\n        marginLeft: 20,\n        alignItems: 'center'\n      }\n    }, React.createElement(Ionicons, {\n      name: 'arrow-back',\n      color: 'white',\n      size: 30,\n      onPress: function onPress() {\n        return setIsCustomMoodScreen(false);\n      }\n    }), React.createElement(Text, {\n      style: {\n        color: 'white',\n        fontSize: 24\n      },\n      onPress: function onPress() {\n        return setIsCustomMoodScreen(false);\n      }\n    }, \" Back \")), React.createElement(Text, {\n      style: {\n        color: 'white',\n        fontSize: 26,\n        fontWeight: '500',\n        textAlign: 'center',\n        marginTop: 210,\n        marginLeft: 60,\n        marginRight: 60\n      }\n    }, \"Would you like to share how you feel about your upcoming court summons today?\"), React.createElement(TextInput, {\n      style: {\n        borderWidth: 1.5,\n        padding: 10,\n        margin: 20,\n        borderRadius: 8,\n        borderColor: 'white',\n        color: 'white',\n        fontSize: 20\n      },\n      value: customMood,\n      onChangeText: setCustomMood\n    }), React.createElement(TouchableOpacity, {\n      style: customMood.length == 0 ? styles.disabledButton : styles.button,\n      onPress: function onPress() {\n        if (customMood.length != 0) {\n          setMood(customMood);\n          setIsCustomMoodScreen(false);\n          setIsMoodPicker(false);\n        }\n      }\n    }, React.createElement(Text, null, \" Continue \")));\n  } else {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        padding: 0,\n        backgroundColor: '#768A89'\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: 'white',\n        fontSize: 26,\n        fontWeight: '500',\n        textAlign: 'center',\n        marginTop: 100,\n        marginLeft: 60,\n        marginRight: 60\n      }\n    }, \"How are you feeling today about court? \"), moods.map(function (mood, key) {\n      return React.createElement(MoodBubble, {\n        mood: mood,\n        key: key,\n        index: key,\n        setMood: setMood,\n        setIsMoodPicker: setIsMoodPicker,\n        setIsCustomMoodScreen: setIsCustomMoodScreen\n      });\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: 'center',\n        alignSelf: 'center',\n        top: -620\n      }\n    }, React.createElement(Text, {\n      style: {\n        color: 'white',\n        fontSize: 24\n      },\n      onPress: function onPress() {\n        setMood('default');\n        setIsMoodPicker(false);\n      }\n    }, \" Skip \"), React.createElement(Ionicons, {\n      name: 'arrow-forward',\n      color: 'white',\n      size: 30,\n      onPress: function onPress() {\n        setMood('default');\n        setIsMoodPicker(false);\n      }\n    })));\n  }\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: 'white',\n    color: '#768A89',\n    width: 130,\n    height: 50,\n    borderRadius: 90,\n    shadowColor: '#171717',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.3,\n    shadowRadius: 3,\n    alignItems: 'center',\n    justifyContent: 'center',\n    alignSelf: 'center',\n    marginTop: 30\n  },\n  disabledButton: {\n    backgroundColor: '#819897',\n    width: 130,\n    height: 50,\n    borderRadius: 90,\n    alignItems: 'center',\n    justifyContent: 'center',\n    alignSelf: 'center',\n    marginTop: 30\n  }\n});\nexport default MoodPicker;","map":{"version":3,"sources":["/Users/alissavuillier/Documents/courtesy/screens/MoodPicker.js"],"names":["React","useState","useEffect","MapView","Marker","Ionicons","getCountdownDays","homeScreenMoods","moods","swoopBackground","require","xCoordinates","yCoordinates","MoodBubble","mood","index","setMood","setIsMoodPicker","setIsCustomMoodScreen","toLowerCase","justifyContent","alignItems","borderRadius","backgroundColor","width","height","left","top","position","shadowColor","shadowOffset","shadowOpacity","shadowRadius","color","fontWeight","MoodPicker","navigation","isCustomMoodScreen","customMood","setCustomMood","flex","padding","flexDirection","marginTop","marginLeft","fontSize","textAlign","marginRight","borderWidth","margin","borderColor","length","styles","disabledButton","button","map","key","alignSelf","StyleSheet","create"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;;;;;;;AASA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,gBAAT,EAA2BC,eAA3B,EAA4CC,KAA5C;;AAEA,IAAMC,eAAe,GAAGC,OAAO,yBAA/B;;AAEA,IAAMC,YAAY,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,EAAf,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,EAA7B,EAAiC,GAAjC,EAAsC,GAAtC,EAA2C,EAA3C,EAA+C,GAA/C,CAArB;AACA,IAAMC,YAAY,GAAG,CAAC,EAAD,EAAK,CAAC,EAAN,EAAU,CAAC,GAAX,EAAgB,CAAC,GAAjB,EAAsB,CAAC,GAAvB,EAA4B,CAAC,GAA7B,EAAkC,CAAC,GAAnC,EAAwC,CAAC,GAAzC,EAA8C,CAAC,GAA/C,EAAoD,CAAC,GAArD,EAA0D,CAAC,GAA3D,CAArB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAsE;AAAA,MAAnEC,IAAmE,QAAnEA,IAAmE;AAAA,MAA7DC,KAA6D,QAA7DA,KAA6D;AAAA,MAAtDC,OAAsD,QAAtDA,OAAsD;AAAA,MAA7CC,eAA6C,QAA7CA,eAA6C;AAAA,MAA5BC,qBAA4B,QAA5BA,qBAA4B;AACvF,SACE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAE,mBAAM;AAC/B,UAAIJ,IAAI,KAAK,UAAb,EAAyB;AACvBE,QAAAA,OAAO,CAACF,IAAI,CAACK,WAAL,EAAD,CAAP;AACAF,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD,OAHD,MAGO;AACLC,QAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AACF;AAPD,KAQE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AACXE,MAAAA,cAAc,EAAE,QADL;AAEXC,MAAAA,UAAU,EAAE,QAFD;AAGXC,MAAAA,YAAY,EAAE,GAHH;AAIXC,MAAAA,eAAe,EAAE,SAJN;AAKXC,MAAAA,KAAK,EAAE,GALI;AAMXC,MAAAA,MAAM,EAAE,GANG;AAOXC,MAAAA,IAAI,EAAEf,YAAY,CAACI,KAAD,CAPP;AAQXY,MAAAA,GAAG,EAAEf,YAAY,CAACG,KAAD,CARN;AASXa,MAAAA,QAAQ,EAAE,OATC;AAUXC,MAAAA,WAAW,EAAE,MAVF;AAWXC,MAAAA,YAAY,EAAE;AAACN,QAAAA,KAAK,EAAE,CAAR;AAAWC,QAAAA,MAAM,EAAE;AAAnB,OAXH;AAYXM,MAAAA,aAAa,EAAE,IAZJ;AAaXC,MAAAA,YAAY,EAAE;AAbH;AAAb,KAeE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,UAAU,EAAE;AAA9B;AAAb,UAAsDpB,IAAtD,MAfF,CARF,CADF;AA4BD,CA7BD;;AA+BA,IAAMqB,UAAU,GAAG,SAAbA,UAAa,QAAoD;AAAA,MAAjDC,UAAiD,SAAjDA,UAAiD;AAAA,MAArCtB,IAAqC,SAArCA,IAAqC;AAAA,MAA/BE,OAA+B,SAA/BA,OAA+B;AAAA,MAAtBC,eAAsB,SAAtBA,eAAsB;;AACrE,kBAAoDhB,QAAQ,CAAC,KAAD,CAA5D;AAAA;AAAA,MAAOoC,kBAAP;AAAA,MAA2BnB,qBAA3B;;AACA,mBAAoCjB,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOqC,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAIF,kBAAJ,EAAwB;AACtB,WACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEG,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,OAAO,EAAE,CAApB;AAAuBlB,QAAAA,eAAe,EAAE;AAAxC;AAAb,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEmB,QAAAA,aAAa,EAAE,KAAjB;AAAwBC,QAAAA,SAAS,EAAE,EAAnC;AAAuCC,QAAAA,UAAU,EAAE,EAAnD;AAAuDvB,QAAAA,UAAU,EAAE;AAAnE;AAAb,OACE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE,YAAhB;AAA8B,MAAA,KAAK,EAAE,OAArC;AAA8C,MAAA,IAAI,EAAE,EAApD;AAAwD,MAAA,OAAO,EAAE;AAAA,eAAMH,qBAAqB,CAAC,KAAD,CAA3B;AAAA;AAAjE,MADF,EAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE,OAAT;AAAkBY,QAAAA,QAAQ,EAAE;AAA5B,OAAb;AAA+C,MAAA,OAAO,EAAE;AAAA,eAAM3B,qBAAqB,CAAC,KAAD,CAA3B;AAAA;AAAxD,gBAFF,CADF,EAKE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEe,QAAAA,KAAK,EAAE,OAAT;AAAkBY,QAAAA,QAAQ,EAAE,EAA5B;AAAgCX,QAAAA,UAAU,EAAE,KAA5C;AAAmDY,QAAAA,SAAS,EAAE,QAA9D;AAAwEH,QAAAA,SAAS,EAAE,GAAnF;AAAwFC,QAAAA,UAAU,EAAE,EAApG;AAAwGG,QAAAA,WAAW,EAAE;AAArH;AAAb,uFALF,EAME,oBAAC,SAAD;AACE,MAAA,KAAK,EAAE;AAAEC,QAAAA,WAAW,EAAE,GAAf;AAAoBP,QAAAA,OAAO,EAAE,EAA7B;AAAiCQ,QAAAA,MAAM,EAAE,EAAzC;AAA6C3B,QAAAA,YAAY,EAAE,CAA3D;AAA8D4B,QAAAA,WAAW,EAAE,OAA3E;AAAoFjB,QAAAA,KAAK,EAAE,OAA3F;AAAoGY,QAAAA,QAAQ,EAAE;AAA9G,OADT;AAEE,MAAA,KAAK,EAAEP,UAFT;AAGE,MAAA,YAAY,EAAEC;AAHhB,MANF,EAWE,oBAAC,gBAAD;AAAkB,MAAA,KAAK,EAAED,UAAU,CAACa,MAAX,IAAqB,CAArB,GAAyBC,MAAM,CAACC,cAAhC,GAAiDD,MAAM,CAACE,MAAjF;AAAyF,MAAA,OAAO,EAAE,mBAAM;AACtG,YAAIhB,UAAU,CAACa,MAAX,IAAqB,CAAzB,EAA4B;AAC1BnC,UAAAA,OAAO,CAACsB,UAAD,CAAP;AACApB,UAAAA,qBAAqB,CAAC,KAAD,CAArB;AACAD,UAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF;AAND,OAOE,oBAAC,IAAD,qBAPF,CAXF,CADF;AAuBD,GAxBD,MAwBO;AACL,WACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEuB,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,OAAO,EAAE,CAApB;AAAuBlB,QAAAA,eAAe,EAAE;AAAxC;AAAb,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEU,QAAAA,KAAK,EAAE,OAAT;AAAkBY,QAAAA,QAAQ,EAAE,EAA5B;AAAgCX,QAAAA,UAAU,EAAE,KAA5C;AAAmDY,QAAAA,SAAS,EAAE,QAA9D;AAAwEH,QAAAA,SAAS,EAAE,GAAnF;AAAwFC,QAAAA,UAAU,EAAE,EAApG;AAAwGG,QAAAA,WAAW,EAAE;AAArH;AAAb,iDADF,EAGIvC,KAAK,CAAC+C,GAAN,CAAU,UAACzC,IAAD,EAAO0C,GAAP,EAAe;AACvB,aAAQ,oBAAC,UAAD;AAAY,QAAA,IAAI,EAAE1C,IAAlB;AAAwB,QAAA,GAAG,EAAE0C,GAA7B;AAAkC,QAAA,KAAK,EAAEA,GAAzC;AAA8C,QAAA,OAAO,EAAExC,OAAvD;AAAgE,QAAA,eAAe,EAAEC,eAAjF;AAAkG,QAAA,qBAAqB,EAAEC;AAAzH,QAAR;AACD,KAFD,CAHJ,EAOE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEwB,QAAAA,aAAa,EAAE,KAAjB;AAAwBrB,QAAAA,UAAU,EAAE,QAApC;AAA8CoC,QAAAA,SAAS,EAAE,QAAzD;AAAmE9B,QAAAA,GAAG,EAAE,CAAC;AAAzE;AAAb,OACE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEM,QAAAA,KAAK,EAAE,OAAT;AAAkBY,QAAAA,QAAQ,EAAE;AAA5B,OAAb;AAA+C,MAAA,OAAO,EAAE,mBAAM;AAC5D7B,QAAAA,OAAO,CAAC,SAAD,CAAP;AACAC,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AAHD,gBADF,EAKE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAE,eAAhB;AAAiC,MAAA,KAAK,EAAE,OAAxC;AAAiD,MAAA,IAAI,EAAE,EAAvD;AAA2D,MAAA,OAAO,EAAE,mBAAM;AACxED,QAAAA,OAAO,CAAC,SAAD,CAAP;AACAC,QAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AAHD,MALF,CAPF,CADJ;AAoBD;AACF,CAlDD;;AAoDA,IAAMmC,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC/BL,EAAAA,MAAM,EAAE;AACN/B,IAAAA,eAAe,EAAE,OADX;AAENU,IAAAA,KAAK,EAAE,SAFD;AAGNT,IAAAA,KAAK,EAAE,GAHD;AAINC,IAAAA,MAAM,EAAE,EAJF;AAKNH,IAAAA,YAAY,EAAE,EALR;AAMNO,IAAAA,WAAW,EAAE,SANP;AAONC,IAAAA,YAAY,EAAE;AAACN,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAPR;AAQNM,IAAAA,aAAa,EAAE,GART;AASNC,IAAAA,YAAY,EAAE,CATR;AAUNX,IAAAA,UAAU,EAAE,QAVN;AAWND,IAAAA,cAAc,EAAE,QAXV;AAYNqC,IAAAA,SAAS,EAAE,QAZL;AAaNd,IAAAA,SAAS,EAAE;AAbL,GADuB;AAgB/BU,EAAAA,cAAc,EAAE;AACd9B,IAAAA,eAAe,EAAE,SADH;AAEdC,IAAAA,KAAK,EAAE,GAFO;AAGdC,IAAAA,MAAM,EAAE,EAHM;AAIdH,IAAAA,YAAY,EAAE,EAJA;AAKdD,IAAAA,UAAU,EAAE,QALE;AAMdD,IAAAA,cAAc,EAAE,QANF;AAOdqC,IAAAA,SAAS,EAAE,QAPG;AAQdd,IAAAA,SAAS,EAAE;AARG;AAhBe,CAAlB,CAAf;AA4BA,eAAeR,UAAf","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport {\n  TouchableOpacity,\n  StyleSheet,\n  View,\n  Text,\n  SafeAreaView,\n  TextInput,\n} from 'react-native';\nimport MapView from 'react-native-maps';\nimport { Marker } from 'react-native-maps';\nimport { Ionicons } from '@expo/vector-icons';\nimport { getCountdownDays, homeScreenMoods, moods } from '../utils';\n\nconst swoopBackground = require(\"./home_background.png\");\n\nconst xCoordinates = [20, 150, 284, 30, 160, 284, 20, 150, 280, 20, 280];\nconst yCoordinates = [30, -15, -185, -160, -195, -380, -350, -370, -550, -530, -640];\n\nconst MoodBubble = ({ mood, index, setMood, setIsMoodPicker, setIsCustomMoodScreen }) => {\n  return (\n    <TouchableOpacity onPress={() => {\n      if (mood !== \"other...\") {\n        setMood(mood.toLowerCase());\n        setIsMoodPicker(false);\n      } else {\n        setIsCustomMoodScreen(true);\n      }\n    }}>\n      <View style={{\n        justifyContent: 'center',\n        alignItems: 'center',\n        borderRadius: 100,\n        backgroundColor: '#8DA4A3',\n        width: 110,\n        height: 110,\n        left: xCoordinates[index],\n        top: yCoordinates[index],\n        position: 'fixed',\n        shadowColor: '#000',\n        shadowOffset: {width: 0, height: 0},\n        shadowOpacity: 0.25,\n        shadowRadius: 4,\n      }}>\n        <Text style={{ color: 'white', fontWeight: '500' }}> {mood} </Text>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nconst MoodPicker = ({ navigation, mood, setMood, setIsMoodPicker }) => {\n  const [isCustomMoodScreen, setIsCustomMoodScreen] = useState(false);\n  const [customMood, setCustomMood] = useState('');\n\n  if (isCustomMoodScreen) {\n    return (\n      <View style={{ flex: 1, padding: 0, backgroundColor: '#768A89' }}>\n        <View style={{ flexDirection: 'row', marginTop: 70, marginLeft: 20, alignItems: 'center' }}>\n          <Ionicons name={'arrow-back'} color={'white'} size={30} onPress={() => setIsCustomMoodScreen(false)}/>\n          <Text style={{ color: 'white', fontSize: 24 }} onPress={() => setIsCustomMoodScreen(false)}> Back </Text>\n        </View>\n        <Text style={{ color: 'white', fontSize: 26, fontWeight: '500', textAlign: 'center', marginTop: 210, marginLeft: 60, marginRight: 60}}>Would you like to share how you feel about your upcoming court summons today?</Text>\n        <TextInput\n          style={{ borderWidth: 1.5, padding: 10, margin: 20, borderRadius: 8, borderColor: 'white', color: 'white', fontSize: 20 }}\n          value={customMood}\n          onChangeText={setCustomMood}\n        />\n        <TouchableOpacity style={customMood.length == 0 ? styles.disabledButton : styles.button} onPress={() => {\n          if (customMood.length != 0) {\n            setMood(customMood);\n            setIsCustomMoodScreen(false);\n            setIsMoodPicker(false);\n          }\n        }}>\n          <Text> Continue </Text>\n        </TouchableOpacity>\n      </View>\n    );\n  } else {\n    return (\n        <View style={{ flex: 1, padding: 0, backgroundColor: '#768A89' }}>\n          <Text style={{ color: 'white', fontSize: 26, fontWeight: '500', textAlign: 'center', marginTop: 100, marginLeft: 60, marginRight: 60}}>How are you feeling today about court? </Text>\n          {\n            moods.map((mood, key) => {\n              return (<MoodBubble mood={mood} key={key} index={key} setMood={setMood} setIsMoodPicker={setIsMoodPicker} setIsCustomMoodScreen={setIsCustomMoodScreen}/>)\n            })\n          }\n          <View style={{ flexDirection: \"row\", alignItems: 'center', alignSelf: 'center', top: -620 }}>\n            <Text style={{ color: 'white', fontSize: 24 }} onPress={() => {\n              setMood('default');\n              setIsMoodPicker(false);\n            }}> Skip </Text>\n            <Ionicons name={'arrow-forward'} color={'white'} size={30} onPress={() => {\n              setMood('default');\n              setIsMoodPicker(false);\n            }}/>\n          </View>\n        </View>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: 'white',\n    color: '#768A89',\n    width: 130,\n    height: 50,\n    borderRadius: 90,\n    shadowColor: '#171717',\n    shadowOffset: {width: 0, height: 2},\n    shadowOpacity: 0.3,\n    shadowRadius: 3,\n    alignItems: 'center',\n    justifyContent: 'center',\n    alignSelf: 'center',\n    marginTop: 30,\n  },\n  disabledButton: {\n    backgroundColor: '#819897',\n    width: 130,\n    height: 50,\n    borderRadius: 90,\n    alignItems: 'center',\n    justifyContent: 'center',\n    alignSelf: 'center',\n    marginTop: 30,\n  },\n});\n\nexport default MoodPicker;\n"]},"metadata":{},"sourceType":"module"}